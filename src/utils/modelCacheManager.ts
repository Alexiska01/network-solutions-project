/**
 * –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è 3D –º–æ–¥–µ–ª–µ–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Cache API –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –≤ –±—Ä–∞—É–∑–µ—Ä–µ –Ω–∞ 1 –≥–æ–¥
 */

interface CacheEntry {
  url: string;
  timestamp: number;
  blob: Blob;
  size: number;
}

interface CacheMetadata {
  version: string;
  lastActivity: number;
  models: Record<string, {
    timestamp: number;
    size: number;
    etag?: string;
  }>;
}

class ModelCacheManager {
  private readonly CACHE_NAME = 'idata-models-v2';
  private readonly CACHE_DURATION = 365 * 24 * 60 * 60 * 1000; // 1 –≥–æ–¥
  private readonly ACTIVITY_TIMEOUT = 60 * 60 * 1000; // 1 —á–∞—Å
  private readonly METADATA_KEY = 'cache-metadata';
  
  private cache: Cache | null = null;
  private metadata: CacheMetadata | null = null;

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
   */
  async init(): Promise<void> {
    try {
      this.cache = await caches.open(this.CACHE_NAME);
      await this.loadMetadata();
      console.log('‚úÖ ModelCacheManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.warn('‚ö†Ô∏è ModelCacheManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', error);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫—ç—à–∞
   */
  private async loadMetadata(): Promise<void> {
    try {
      const stored = localStorage.getItem(this.METADATA_KEY);
      if (stored) {
        this.metadata = JSON.parse(stored);
      } else {
        this.metadata = {
          version: '2.0',
          lastActivity: Date.now(),
          models: {}
        };
        await this.saveMetadata();
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è ModelCacheManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö', error);
      this.metadata = {
        version: '2.0',
        lastActivity: Date.now(),
        models: {}
      };
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
   */
  private async saveMetadata(): Promise<void> {
    if (this.metadata) {
      try {
        localStorage.setItem(this.METADATA_KEY, JSON.stringify(this.metadata));
      } catch (error) {
        console.warn('‚ö†Ô∏è ModelCacheManager: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö', error);
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞ WelcomeScreen
   */
  shouldShowWelcomeScreen(): boolean {
    if (!this.metadata) return true;

    const now = Date.now();
    const timeSinceActivity = now - this.metadata.lastActivity;

    // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —á–∞—Å–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (timeSinceActivity > this.ACTIVITY_TIMEOUT) {
      console.log('üïê ModelCacheManager: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º WelcomeScreen - –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 1 —á–∞—Å–∞');
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –≤ –∫—ç—à–µ
    const requiredModels = [
      '/models/3530all.glb',
      '/models/3730all.glb', 
      '/models/4530all.glb',
      '/models/6010all.glb'
    ];

    const allModelsCached = requiredModels.every(url => {
      const modelInfo = this.metadata!.models[url];
      if (!modelInfo) return false;

      const age = now - modelInfo.timestamp;
      return age < this.CACHE_DURATION;
    });

    if (!allModelsCached) {
      console.log('üì¶ ModelCacheManager: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º WelcomeScreen - –Ω–µ –≤—Å–µ –º–æ–¥–µ–ª–∏ –≤ –∫—ç—à–µ');
      return true;
    }

    console.log('‚úÖ ModelCacheManager: –°–∫—Ä—ã–≤–∞–µ–º WelcomeScreen - –≤—Å–µ –º–æ–¥–µ–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã');
    return false;
  }

  /**
   * –û—Ç–º–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  updateActivity(): void {
    if (this.metadata) {
      this.metadata.lastActivity = Date.now();
      this.saveMetadata();
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–∏ –≤ –∫—ç—à–µ
   */
  async hasModel(url: string): Promise<boolean> {
    if (!this.cache || !this.metadata) return false;

    try {
      const response = await this.cache.match(url);
      if (!response) return false;

      const modelInfo = this.metadata.models[url];
      if (!modelInfo) return false;

      const age = Date.now() - modelInfo.timestamp;
      return age < this.CACHE_DURATION;
    } catch (error) {
      console.warn(`‚ö†Ô∏è ModelCacheManager: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏ ${url}`, error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ –∫—ç—à–∞
   */
  async getModel(url: string): Promise<Response | null> {
    if (!this.cache) return null;

    try {
      const response = await this.cache.match(url);
      if (response) {
        console.log(`‚úÖ ModelCacheManager: –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –∫—ç—à–∞ ${url}`);
      }
      return response || null;
    } catch (error) {
      console.warn(`‚ö†Ô∏è ModelCacheManager: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ ${url}`, error);
      return null;
    }
  }

  /**
   * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
   */
  async cacheModel(url: string, response: Response): Promise<void> {
    if (!this.cache || !this.metadata) return;

    try {
      // –ö–ª–æ–Ω–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
      const responseClone = response.clone();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      await this.cache.put(url, responseClone);

      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      const blob = await response.blob();
      this.metadata.models[url] = {
        timestamp: Date.now(),
        size: blob.size,
        etag: response.headers.get('etag') || undefined
      };

      await this.saveMetadata();
      console.log(`‚úÖ ModelCacheManager: –ú–æ–¥–µ–ª—å –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞ ${url} (${(blob.size / 1024 / 1024).toFixed(1)} MB)`);
    } catch (error) {
      console.warn(`‚ö†Ô∏è ModelCacheManager: –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ ${url}`, error);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async loadModel(url: string): Promise<Response | null> {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = await this.getModel(url);
    if (cached) {
      return cached;
    }

    try {
      console.log(`üîÑ ModelCacheManager: –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å ${url}`);
      
      const response = await fetch(url, {
        cache: 'force-cache',
        mode: 'cors'
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      // –ö—ç—à–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
      await this.cacheModel(url, response.clone());
      
      return response;
    } catch (error) {
      console.error(`‚ùå ModelCacheManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ ${url}`, error);
      return null;
    }
  }

  /**
   * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
   */
  async preloadModels(urls: string[], maxConcurrent: number = 2): Promise<void> {
    console.log(`üöÄ ModelCacheManager: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É ${urls.length} –º–æ–¥–µ–ª–µ–π`);
    
    const semaphore = new Array(maxConcurrent).fill(0);
    const results = await Promise.allSettled(
      urls.map(async (url, index) => {
        // –û–∂–∏–¥–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç
        const slotIndex = index % maxConcurrent;
        await new Promise(resolve => setTimeout(resolve, slotIndex * 200));
        
        return this.loadModel(url);
      })
    );

    const successful = results.filter(r => r.status === 'fulfilled' && r.value).length;
    console.log(`‚úÖ ModelCacheManager: –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (${successful}/${urls.length})`);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –º–æ–¥–µ–ª–µ–π
   */
  async cleanup(): Promise<void> {
    if (!this.cache || !this.metadata) return;

    try {
      const now = Date.now();
      const toDelete: string[] = [];

      for (const [url, info] of Object.entries(this.metadata.models)) {
        const age = now - info.timestamp;
        if (age > this.CACHE_DURATION) {
          toDelete.push(url);
        }
      }

      for (const url of toDelete) {
        await this.cache.delete(url);
        delete this.metadata.models[url];
        console.log(`üßπ ModelCacheManager: –£–¥–∞–ª–µ–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è –º–æ–¥–µ–ª—å ${url}`);
      }

      if (toDelete.length > 0) {
        await this.saveMetadata();
        console.log(`‚úÖ ModelCacheManager: –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —É–¥–∞–ª–µ–Ω–æ ${toDelete.length} –º–æ–¥–µ–ª–µ–π`);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è ModelCacheManager: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—ç—à–µ
   */
  getCacheInfo(): {
    totalModels: number;
    totalSize: string;
    oldestModel: string | null;
    newestModel: string | null;
  } {
    if (!this.metadata) {
      return { totalModels: 0, totalSize: '0 MB', oldestModel: null, newestModel: null };
    }

    const models = Object.entries(this.metadata.models);
    const totalSize = models.reduce((sum, [, info]) => sum + (info.size || 0), 0);
    
    let oldest: [string, any] | null = null;
    let newest: [string, any] | null = null;

    models.forEach(([url, info]) => {
      if (!oldest || info.timestamp < oldest[1].timestamp) {
        oldest = [url, info];
      }
      if (!newest || info.timestamp > newest[1].timestamp) {
        newest = [url, info];
      }
    });

    return {
      totalModels: models.length,
      totalSize: `${(totalSize / 1024 / 1024).toFixed(1)} MB`,
      oldestModel: oldest ? oldest[0] : null,
      newestModel: newest ? newest[0] : null
    };
  }
}

export const modelCacheManager = new ModelCacheManager();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
if (typeof window !== 'undefined' && 'caches' in window) {
  modelCacheManager.init();
}