// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è 3D –º–æ–¥–µ–ª–µ–π –Ω–∞ 1 –≥–æ–¥
export class ModelCache {
  private static readonly CACHE_NAME = 'idata-models-cache';
  private static readonly CACHE_VERSION = 'v1';
  private static readonly CACHE_EXPIRY_KEY = 'idata-models-cache-expiry';
  private static readonly CACHE_STATUS_KEY = 'idata-models-cache-status';
  private static readonly ONE_YEAR_MS = 365 * 24 * 60 * 60 * 1000; // 1 –≥–æ–¥ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

  // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
  private static readonly MODEL_URLS = [
    '/models/3530all.glb',
    '/models/3730all.glb', 
    '/models/4530all.glb',
    '/models/6010all.glb'
  ];

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫—ç—à –º–æ–¥–µ–ª–µ–π
   */
  static async isCacheValid(): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage –Ω–∞ –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞
      const expiryTime = localStorage.getItem(this.CACHE_EXPIRY_KEY);
      const cacheStatus = localStorage.getItem(this.CACHE_STATUS_KEY);
      
      if (!expiryTime || !cacheStatus || cacheStatus !== 'complete') {
        console.log('üîç ModelCache: –ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–π');
        return false;
      }

      const now = Date.now();
      if (now > parseInt(expiryTime)) {
        console.log('‚è∞ ModelCache: –ö—ç—à –∏—Å—Ç–µ–∫');
        await this.clearCache();
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Cache API
      if ('caches' in window) {
        const cache = await caches.open(this.CACHE_NAME);
        const cachedRequests = await cache.keys();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –º–æ–¥–µ–ª–∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã
        const cachedUrls = cachedRequests.map(req => new URL(req.url).pathname);
        const allModelsPresent = this.MODEL_URLS.every(url => 
          cachedUrls.some(cachedUrl => cachedUrl === url)
        );

        if (!allModelsPresent) {
          console.log('üìã ModelCache: –ù–µ –≤—Å–µ –º–æ–¥–µ–ª–∏ –≤ –∫—ç—à–µ');
          return false;
        }

        console.log('‚úÖ ModelCache: –ö—ç—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
        return true;
      }

      return false;
    } catch (error) {
      console.error('‚ùå ModelCache: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞:', error);
      return false;
    }
  }

  /**
   * –ö—ç—à–∏—Ä—É–µ—Ç –≤—Å–µ –º–æ–¥–µ–ª–∏
   */
  static async cacheModels(onProgress?: (progress: number) => void): Promise<void> {
    try {
      console.log('üöÄ ModelCache: –ù–∞—á–∏–Ω–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π');
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è"
      localStorage.setItem(this.CACHE_STATUS_KEY, 'loading');

      if (!('caches' in window)) {
        throw new Error('Cache API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      }

      const cache = await caches.open(this.CACHE_NAME);
      let completedCount = 0;

      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
      const batchSize = 2; // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ 2 –º–æ–¥–µ–ª–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
      
      for (let i = 0; i < this.MODEL_URLS.length; i += batchSize) {
        const batch = this.MODEL_URLS.slice(i, i + batchSize);
        
        await Promise.all(batch.map(async (modelUrl) => {
          try {
            console.log(`üì¶ ModelCache: –ó–∞–≥—Ä—É–∂–∞–µ–º ${modelUrl}`);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
            const response = await fetch(modelUrl, {
              cache: 'no-cache' // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            });

            if (!response.ok) {
              throw new Error(`HTTP ${response.status}`);
            }

            // –ö—ç—à–∏—Ä—É–µ–º response
            await cache.put(modelUrl, response.clone());
            
            completedCount++;
            const progress = (completedCount / this.MODEL_URLS.length) * 100;
            onProgress?.(progress);
            
            console.log(`‚úÖ ModelCache: ${modelUrl} –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω (${Math.round(progress)}%)`);
          } catch (error) {
            console.error(`‚ùå ModelCache: –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è ${modelUrl}:`, error);
            throw error;
          }
        }));
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫—ç—à–∞ (1 –≥–æ–¥)
      const expiryTime = Date.now() + this.ONE_YEAR_MS;
      localStorage.setItem(this.CACHE_EXPIRY_KEY, expiryTime.toString());
      localStorage.setItem(this.CACHE_STATUS_KEY, 'complete');
      
      console.log('üéâ ModelCache: –í—Å–µ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 1 –≥–æ–¥');
    } catch (error) {
      console.error('‚ùå ModelCache: –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      localStorage.setItem(this.CACHE_STATUS_KEY, 'error');
      throw error;
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à
   */
  static async clearCache(): Promise<void> {
    try {
      console.log('üßπ ModelCache: –û—á–∏—â–∞–µ–º –∫—ç—à');
      
      // –û—á–∏—â–∞–µ–º Cache API
      if ('caches' in window) {
        await caches.delete(this.CACHE_NAME);
      }
      
      // –û—á–∏—â–∞–µ–º localStorage
      localStorage.removeItem(this.CACHE_EXPIRY_KEY);
      localStorage.removeItem(this.CACHE_STATUS_KEY);
      
      console.log('‚úÖ ModelCache: –ö—ç—à –æ—á–∏—â–µ–Ω');
    } catch (error) {
      console.error('‚ùå ModelCache: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫—ç—à–∞
   */
  static getCacheStatus(): 'none' | 'loading' | 'complete' | 'error' {
    const status = localStorage.getItem(this.CACHE_STATUS_KEY);
    return (status as any) || 'none';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç URL –º–æ–¥–µ–ª–∏ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL
   */
  static async getModelUrl(originalUrl: string): Promise<string> {
    try {
      if ('caches' in window) {
        const cache = await caches.open(this.CACHE_NAME);
        const cachedResponse = await cache.match(originalUrl);
        
        if (cachedResponse) {
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º cached blob URL –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
          const blob = await cachedResponse.blob();
          return URL.createObjectURL(blob);
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL
      return originalUrl;
    } catch (error) {
      console.error('‚ùå ModelCache: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏–∑ –∫—ç—à–∞:', error);
      return originalUrl;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  static async getCacheInfo(): Promise<{
    isValid: boolean;
    status: string;
    expiryDate: string | null;
    cachedModels: string[];
  }> {
    const isValid = await this.isCacheValid();
    const status = this.getCacheStatus();
    const expiryTime = localStorage.getItem(this.CACHE_EXPIRY_KEY);
    const expiryDate = expiryTime ? new Date(parseInt(expiryTime)).toISOString() : null;
    
    let cachedModels: string[] = [];
    
    try {
      if ('caches' in window) {
        const cache = await caches.open(this.CACHE_NAME);
        const requests = await cache.keys();
        cachedModels = requests.map(req => new URL(req.url).pathname);
      }
    } catch (error) {
      console.error('‚ùå ModelCache: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—ç—à–µ:', error);
    }

    return {
      isValid,
      status,
      expiryDate,
      cachedModels
    };
  }
}