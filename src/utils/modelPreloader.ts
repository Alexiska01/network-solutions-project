// –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ 3D –º–æ–¥–µ–ª–µ–π —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export class ModelPreloader {
  private static instance: ModelPreloader;
  private loadedModels: Map<string, boolean> = new Map();
  private loadingModels: Map<string, Promise<void>> = new Map();
  private modelElements: Map<string, HTMLElement> = new Map();
  private preloadQueue: Array<{ url: string; priority: number }> = [];
  private isProcessingQueue = false;
  private maxConcurrentLoads = 2;

  private constructor() {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä–æ–≤
    this.setupPriorityQueue();
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    this.setupIntelligentCache();
  }
  
  private setupPriorityQueue() {
    // –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å —Ä–∞–≤–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å 4530 –∏ 6010
    const modelPriorities = [
      { url: '/models/3530all.glb', priority: 10 }, // –°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –º–æ–¥–µ–ª—å  
      { url: '/models/3730all.glb', priority: 10 }, // –†–∞–≤–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      { url: '/models/4530all.glb', priority: 10 }, // –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      { url: '/models/6010all.glb', priority: 10 }  // –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
    modelPriorities.forEach(({ url, priority }) => {
      this.preloadQueue.push({ url, priority });
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–±–æ–ª—å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç = —Ä–∞–Ω—å—à–µ –∑–∞–≥—Ä—É–∑–∫–∞)
    this.preloadQueue.sort((a, b) => b.priority - a.priority);
  }
  
  private setupIntelligentCache() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Service Worker –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if ('serviceWorker' in navigator && 'caches' in window) {
      this.enableServiceWorkerCache();
    }
    
    // Resource Hints –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
    this.addResourceHints();
  }
  
  private enableServiceWorkerCache() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ Service Worker
    navigator.serviceWorker.ready.then(registration => {
      console.log('üîß ModelPreloader: Service Worker –≥–æ—Ç–æ–≤ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π');
    }).catch(err => {
      console.warn('‚ö†Ô∏è ModelPreloader: Service Worker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', err);
    });
  }
  
  private addResourceHints() {
    // –¢–æ–ª—å–∫–æ –¥–ª—è "all" –º–æ–¥–µ–ª–µ–π - –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä–æ–≤
    const allModels = [
      '/models/3530all.glb',
      '/models/3730all.glb',
      '/models/4530all.glb',
      '/models/6010all.glb'
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º dns-prefetch –∏ preconnect –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    const preconnect = document.createElement('link');
    preconnect.rel = 'preconnect';
    preconnect.href = window.location.origin;
    document.head.appendChild(preconnect);
    
    // –î–æ–±–∞–≤–ª—è–µ–º prefetch –¥–ª—è –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π (—Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ)
    allModels.slice(0, 2).forEach(url => {
      const link = document.createElement('link');
      link.rel = 'prefetch';
      link.href = url;
      link.as = 'fetch';
      link.setAttribute('fetchpriority', 'high');
      document.head.appendChild(link);
      console.log(`üì• ModelPreloader: Prefetch –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è ${url}`);
    });
    
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º preload —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    allModels.slice(2).forEach(url => {
      const link = document.createElement('link');
      link.rel = 'preload';
      link.href = url;
      link.as = 'fetch';
      link.setAttribute('fetchpriority', 'low');
      document.head.appendChild(link);
    });
  }

  static getInstance(): ModelPreloader {
    if (!ModelPreloader.instance) {
      ModelPreloader.instance = new ModelPreloader();
    }
    return ModelPreloader.instance;
  }

  async preloadModel(url: string, priority: 'high' | 'low' = 'low'): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ "all" –º–æ–¥–µ–ª–∏
    if (!url.includes('all.glb')) {
      console.warn(`‚ö†Ô∏è ModelPreloader: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–µ-all –º–æ–¥–µ–ª–∏: ${url}`);
      return;
    }
    
    if (this.loadedModels.get(url)) {
      console.log(`‚úÖ ModelPreloader: –ú–æ–¥–µ–ª—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${url}`);
      return;
    }

    if (this.loadingModels.has(url)) {
      return this.loadingModels.get(url)!;
    }

    const loadPromise = new Promise<void>((resolve, reject) => {
      // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      const container = document.createElement('div');
      container.style.cssText = `
        position: fixed;
        width: 1px;
        height: 1px;
        opacity: 0;
        pointer-events: none;
        z-index: -9999;
        left: -9999px;
        top: -9999px;
        visibility: hidden;
      `;
      
      const modelViewer = document.createElement('model-viewer') as any;
      modelViewer.src = url;
      
      // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
      if (priority === 'high') {
        modelViewer.loading = 'eager';
        modelViewer.reveal = 'immediate';
        modelViewer.setAttribute('fetchpriority', 'high');
      } else {
        modelViewer.loading = 'lazy';
        modelViewer.reveal = 'interaction';
        modelViewer.setAttribute('fetchpriority', 'low');
      }
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
      modelViewer.style.cssText = 'width: 100%; height: 100%;';
      modelViewer.setAttribute('disable-zoom', '');
      modelViewer.setAttribute('disable-pan', '');
      modelViewer.setAttribute('disable-tap', '');
      modelViewer.setAttribute('interaction-prompt', 'none');
      modelViewer.setAttribute('ar', 'false');
      modelViewer.setAttribute('ar-modes', '');
      modelViewer.setAttribute('camera-controls', 'false');
      modelViewer.setAttribute('auto-rotate', 'false');
      modelViewer.setAttribute('shadow-intensity', '0');
      modelViewer.setAttribute('exposure', '0.5');
      
      // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
      const loadHandler = () => {
        console.log(`‚úÖ ModelPreloader: –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ [${priority}]: ${url}`);
        this.loadedModels.set(url, true);
        this.modelElements.set(url, container);
        
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        if (priority === 'low') {
          setTimeout(() => {
            modelViewer.dismissPoster?.();
          }, 100);
        }
        
        resolve();
      };
      
      const errorHandler = (e: Event) => {
        console.error(`‚ùå ModelPreloader: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: ${url}`, e);
        container.remove();
        reject(new Error(`Failed to preload model: ${url}`));
      };
      
      modelViewer.addEventListener('load', loadHandler, { once: true });
      modelViewer.addEventListener('error', errorHandler, { once: true });
      
      container.appendChild(modelViewer);
      document.body.appendChild(container);
      
      // –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
      setTimeout(() => {
        if (!this.loadedModels.get(url)) {
          errorHandler(new Event('timeout'));
        }
      }, 30000); // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    });

    this.loadingModels.set(url, loadPromise);
    
    try {
      await loadPromise;
    } finally {
      this.loadingModels.delete(url);
      this.processQueue(); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    }
  }

  async preloadMultiple(urls: string[], highPriorityCount: number = 2): Promise<void> {
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ "all" –º–æ–¥–µ–ª–∏
    const allModels = urls.filter(url => url.includes('all.glb'));
    
    if (allModels.length === 0) {
      console.warn('‚ö†Ô∏è ModelPreloader: –ù–µ—Ç all-–º–æ–¥–µ–ª–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
      return;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏
    const highPriorityPromises = allModels.slice(0, highPriorityCount).map(url => 
      this.preloadModel(url, 'high')
    );
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    await Promise.allSettled(highPriorityPromises);
    
    // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    const lowPriorityPromises = allModels.slice(highPriorityCount).map(url => 
      this.preloadModel(url, 'low')
    );
    
    await Promise.allSettled(lowPriorityPromises);
  }

  private async processQueue() {
    if (this.isProcessingQueue || this.preloadQueue.length === 0) {
      return;
    }
    
    this.isProcessingQueue = true;
    
    while (this.preloadQueue.length > 0 && this.loadingModels.size < this.maxConcurrentLoads) {
      const item = this.preloadQueue.shift();
      if (item && !this.loadedModels.get(item.url)) {
        this.preloadModel(item.url, item.priority >= 9 ? 'high' : 'low');
      }
    }
    
    this.isProcessingQueue = false;
  }

  isLoaded(url: string): boolean {
    return this.loadedModels.get(url) || false;
  }
  
  getLoadedCount(): number {
    return this.loadedModels.size;
  }
  
  getLoadingCount(): number {
    return this.loadingModels.size;
  }
  
  getAllLoadedModels(): string[] {
    return Array.from(this.loadedModels.keys());
  }

  cleanup(): void {
    // –û—á–∏—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    this.modelElements.forEach((element, url) => {
      setTimeout(() => {
        element.remove();
      }, 100);
    });
    
    this.modelElements.clear();
    this.loadedModels.clear();
    this.loadingModels.clear();
    this.preloadQueue = [];
    
    console.log('üßπ ModelPreloader: –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }
  
  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä–∞
  async preloadSwitchModel(switchSeries: '3530' | '3730' | '4530' | '6010'): Promise<void> {
    const url = `/models/${switchSeries}all.glb`;
    await this.preloadModel(url, 'high');
  }
}

export const modelPreloader = ModelPreloader.getInstance();