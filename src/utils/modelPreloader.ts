// –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ 3D –º–æ–¥–µ–ª–µ–π —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
import { modelCacheManager } from './modelCacheManager';

export class ModelPreloader {
  private static instance: ModelPreloader;
  private loadedModels: Map<string, boolean> = new Map();
  private loadingModels: Map<string, Promise<void>> = new Map();

  private constructor() {
  // –†–ê–ù–¨–®–ï: –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –æ—á–∏—â–∞–ª–∏ –≤—Å–µ preload/prefetch —Å—Å—ã–ª–∫–∏ –¥–ª—è .glb, —á—Ç–æ —É–¥–∞–ª—è–ª–æ
  // —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ <link> –∏–∑ index.html –∏ –ø—Ä–∏–≤–æ–¥–∏–ª–æ –∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –≤—Å—Ç–∞–≤–∫–∞–º –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º
  // –±—Ä–∞—É–∑–µ—Ä–∞ –æ "preload –Ω–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Å—Ç—Ä–æ".
  // –¢–ï–ü–ï–†–¨: –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ resource hints, –æ—Å—Ç–∞–≤–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä—É –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫—É.
  // (–§—É–Ω–∫—Ü–∏—è removeExistingPreloadLinks —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–∏–∂–µ, –Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è.)
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä–æ–≤
    this.setupPriorityQueue();
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    this.setupIntelligentCache();
  }
  
  
  private setupPriorityQueue() {
  // –û—á–µ—Ä–µ–¥—å –æ—Ç–∫–ª—é—á–µ–Ω–∞
  }
  
  private setupIntelligentCache() {
    // Service Worker –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    console.log('üéØ ModelPreloader: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –±–µ–∑ Service Worker');
  }
  


  static getInstance(): ModelPreloader {
    if (!ModelPreloader.instance) {
      ModelPreloader.instance = new ModelPreloader();
    }
    return ModelPreloader.instance;
  }

  async preloadModel(url: string, priority: 'high' | 'low' = 'low'): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ "all" –º–æ–¥–µ–ª–∏
    if (!url.includes('all.glb')) {
      return;
    }
    
    if (this.loadedModels.get(url)) {
      return;
    }

    if (this.loadingModels.has(url)) {
      return this.loadingModels.get(url)!;
    }

    // ‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø—É—Ç—å: –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –≤ Cache API ‚Äî –æ—Ç–º–µ—á–∞–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—É—é –∑–∞–≥—Ä—É–∑–∫—É
    try {
      if (await modelCacheManager.hasModel(url)) {
        this.loadedModels.set(url, true);
        return;
      }
    } catch {
      // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    }

    const controller = new AbortController();
    const loadPromise = (async () => {
      try {
        // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏, –Ω–∏–∑–∫–∏–π ‚Äî –ª—ë–≥–∫–∞—è –ø–∞—É–∑–∞
        if (priority === 'low') {
          await new Promise(r => setTimeout(r, 200));
        }
        const res = await fetch(url, { signal: controller.signal, cache: 'force-cache' });
        if (!res.ok) throw new Error('HTTP ' + res.status);
        // –ù–µ —Å–æ–∑–¥–∞—ë–º blob/objectURL ‚Äî model-viewer —Å–∞–º –∑–∞–≥—Ä—É–∑–∏—Ç –ø–æ URL, –º—ã –ª–∏—à—å –ø—Ä–æ–≥—Ä–µ–ª–∏ –∫—ç—à
        this.loadedModels.set(url, true);
      } catch (e) {
        this.loadedModels.set(url, false);
      }
    })();

    this.loadingModels.set(url, loadPromise);
    
  try { await loadPromise; } finally { this.loadingModels.delete(url); }
  }

  async preloadMultiple(urls: string[], highPriorityCount: number = 2): Promise<void> {
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ "all" –º–æ–¥–µ–ª–∏
    const allModels = urls.filter(url => url.includes('all.glb'));
    
    if (allModels.length === 0) {
      return;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏
    const highPriorityPromises = allModels.slice(0, highPriorityCount).map(url => 
      this.preloadModel(url, 'high')
    );
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    await Promise.allSettled(highPriorityPromises);
    
    // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    const lowPriorityPromises = allModels.slice(highPriorityCount).map(url => 
      this.preloadModel(url, 'low')
    );
    
    await Promise.allSettled(lowPriorityPromises);
  }


  isLoaded(url: string): boolean {
    const status = this.loadedModels.get(url);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–Ω–µ false)
    return status === true;
  }
  
  getLoadedCount(): number {
    return this.loadedModels.size;
  }
  
  getLoadingCount(): number {
    return this.loadingModels.size;
  }
  
  getAllLoadedModels(): string[] {
    return Array.from(this.loadedModels.keys());
  }

  cleanup(): void {
  // –£–±—Ä–∞–ª–∏ —Å–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã ‚Äî —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ —á–∏—Å—Ç–∏–º –∫–∞—Ä—Ç—ã
    this.loadedModels.clear();
    this.loadingModels.clear();
    // –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
  }
  // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
  debugState() {
    return {
      loaded: Array.from(this.loadedModels.entries()),
      loading: Array.from(this.loadingModels.keys())
    };
  }
  
  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä–∞
  async preloadSwitchModel(switchSeries: '3530' | '3730' | '4530' | '6010'): Promise<void> {
    const url = `/models/${switchSeries}all.glb`;
    await this.preloadModel(url, 'high');
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–º–µ—Ç–∫–∏ –º–æ–¥–µ–ª–∏ –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
  markAsLoaded(url: string): void {
    this.loadedModels.set(url, true);
  }
}

export const modelPreloader = ModelPreloader.getInstance();