import { useState } from 'react';

interface ModelPreloaderState {
  loadedModels: Set<string>;
  preloadingModels: Set<string>;
  partiallyLoadedModels: Set<string>;
  isModelReady: (url: string) => boolean;
  isModelPartiallyReady: (url: string) => boolean;
  preloadModel: (url: string) => Promise<void>;
  preloadModelPartially: (url: string, percentage: number) => Promise<void>;
  preloadModels: (urls: string[]) => Promise<void>;
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
const globalModelCache = new Set<string>();
const globalPartialCache = new Set<string>();

export const useModelPreloader = (): ModelPreloaderState => {
  const [loadedModels, setLoadedModels] = useState<Set<string>>(new Set(globalModelCache));
  const [partiallyLoadedModels, setPartiallyLoadedModels] = useState<Set<string>>(new Set(globalPartialCache));
  const [preloadingModels, setPreloadingModels] = useState<Set<string>>(new Set());

  const preloadModel = async (url: string): Promise<void> => {
    if (!globalModelCache.has(url)) {
      console.log('üîÑ ProductHero: –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å:', url);
      
      try {
        const response = await fetch(url, { method: 'HEAD' });
        if (response.ok) {
          console.log('‚úÖ ProductHero: –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', url);
          globalModelCache.add(url);
          setLoadedModels(new Set(globalModelCache));
        } else {
          console.warn('‚ö†Ô∏è ProductHero: –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', url);
        }
      } catch (error) {
        console.error('‚ùå ProductHero: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏:', url, error);
      }
    }
  };

  const preloadModels = async (urls: string[]): Promise<void> => {
    console.log('üîÑ ProductHero: –§–æ–Ω–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π:', urls);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const loadingPromises = urls.map(preloadModel);
    await Promise.all(loadingPromises);
    
    console.log('‚úÖ ProductHero: –í—Å–µ –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
  };

  const preloadModelPartially = async (url: string, percentage: number): Promise<void> => {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤–æ–µ
    if (!globalPartialCache.has(url)) {
      console.log(`‚úÖ –ü–æ–º–µ—á–∞—é –º–æ–¥–µ–ª—å –∫–∞–∫ —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤—É—é (${percentage}%):`, url);
      globalPartialCache.add(url);
      setPartiallyLoadedModels(new Set(globalPartialCache));
    }
    return Promise.resolve();
  };

  const isModelReady = (url: string): boolean => {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å—á–∏—Ç–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –≥–æ—Ç–æ–≤—ã–º–∏
    return true;
  };

  const isModelPartiallyReady = (url: string): boolean => {
    return true;
  };

  return {
    loadedModels,
    partiallyLoadedModels,
    preloadingModels,
    isModelReady,
    isModelPartiallyReady,
    preloadModel,
    preloadModelPartially,
    preloadModels
  };
};