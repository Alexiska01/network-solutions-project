import { useEffect, useRef, useState } from 'react';

interface ModelPreloaderState {
  loadedModels: Set<string>;
  preloadingModels: Set<string>;
  partiallyLoadedModels: Set<string>;
  isModelReady: (url: string) => boolean;
  isModelPartiallyReady: (url: string) => boolean;
  preloadModel: (url: string) => Promise<void>;
  preloadModelPartially: (url: string, percentage: number) => Promise<void>;
  preloadModels: (urls: string[]) => Promise<void>;
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
const globalModelCache = new Set<string>();
const globalPartialCache = new Set<string>();
const globalPreloadPromises = new Map<string, Promise<void>>();

export const useModelPreloader = (): ModelPreloaderState => {
  const [loadedModels, setLoadedModels] = useState<Set<string>>(new Set(globalModelCache));
  const [partiallyLoadedModels, setPartiallyLoadedModels] = useState<Set<string>>(new Set(globalPartialCache));
  const [preloadingModels, setPreloadingModels] = useState<Set<string>>(new Set());
  const preloaderRef = useRef<HTMLDivElement | null>(null);

  // –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
  useEffect(() => {
    if (!preloaderRef.current) {
      const container = document.createElement('div');
      container.style.position = 'absolute';
      container.style.top = '-9999px';
      container.style.left = '-9999px';
      container.style.width = '1px';
      container.style.height = '1px';
      container.style.overflow = 'hidden';
      container.style.visibility = 'hidden';
      container.style.pointerEvents = 'none';
      container.id = 'model-preloader-container';
      
      document.body.appendChild(container);
      preloaderRef.current = container;
    }

    return () => {
      if (preloaderRef.current && document.body.contains(preloaderRef.current)) {
        document.body.removeChild(preloaderRef.current);
      }
    };
  }, []);

  const preloadModel = async (url: string, retryCount = 0): Promise<void> => {
    // –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
    if (globalModelCache.has(url)) {
      return Promise.resolve();
    }

    // –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
    if (globalPreloadPromises.has(url)) {
      return globalPreloadPromises.get(url)!;
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    setPreloadingModels(prev => new Set([...prev, url]));

    const preloadPromise = new Promise<void>((resolve, reject) => {
      console.log(`üöÄ –ù–∞—á–∏–Ω–∞—é –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}):`, url);

      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ model-viewer –µ—Å–ª–∏ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤
      const waitForModelViewer = () => {
        if (typeof customElements !== 'undefined' && customElements.get('model-viewer')) {
          console.log('‚úÖ model-viewer –≥–æ—Ç–æ–≤, –Ω–∞—á–∏–Ω–∞—é –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É');
          startPreload();
        } else {
          console.log('‚è≥ –û–∂–∏–¥–∞—é –∑–∞–≥—Ä—É–∑–∫–∏ model-viewer...', {
            customElementsExists: typeof customElements !== 'undefined',
            modelViewerRegistered: typeof customElements !== 'undefined' ? !!customElements.get('model-viewer') : false
          });
          
          // Fallback —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π fetch —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –æ–∂–∏–¥–∞–Ω–∏—è
          setTimeout(() => {
            if (!globalModelCache.has(url)) {
              console.log('üîÑ Fallback: –ø—Ä–æ–±—É—é –ø—Ä–æ—Å—Ç–æ–π fetch –≤–º–µ—Å—Ç–æ model-viewer –¥–ª—è:', url);
              fetch(url, { method: 'HEAD' }).then(response => {
                console.log('üìä Fetch response:', {
                  url,
                  status: response.status,
                  headers: Object.fromEntries(response.headers.entries()),
                  size: response.headers.get('content-length')
                });
                if (response.ok) {
                  console.log('‚úÖ –ú–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–º–µ—á–∞—é –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é:', url);
                  globalModelCache.add(url);
                  setLoadedModels(new Set(globalModelCache));
                  resolve();
                } else {
                  console.warn('‚ùå –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Å—Ç–∞—Ç—É—Å:', response.status);
                  resolve(); // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                }
              }).catch(error => {
                console.error('‚ùå Fallback fetch –æ—à–∏–±–∫–∞:', url, error);
                resolve(); // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
              });
            }
          }, 3000);
          
          setTimeout(waitForModelViewer, 100);
        }
      };

      const startPreload = () => {
        if (!preloaderRef.current) {
          reject(new Error('Preloader container not available'));
          return;
        }

        // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π model-viewer —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        const modelViewerHTML = `
          <model-viewer
            src="${url}"
            style="width: 1px; height: 1px; display: block; pointer-events: none;"
            loading="eager"
            reveal="auto"
            auto-rotate="false"
            camera-controls="false"
            interaction-prompt="none"
            data-preload-url="${url}">
          </model-viewer>
        `;

        const tempContainer = document.createElement('div');
        tempContainer.innerHTML = modelViewerHTML;
        preloaderRef.current.appendChild(tempContainer);

        const modelViewer = tempContainer.querySelector('model-viewer') as any;

        if (modelViewer) {
          // –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º retry
          const timeout = setTimeout(() => {
            console.warn(`‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ (15 —Å–µ–∫, –ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}):`, url);
            cleanup();
            
            if (retryCount < 2) {
              // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
              setTimeout(() => {
                preloadModel(url, retryCount + 1).then(resolve).catch(reject);
              }, 1000);
            } else {
              console.error('‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã:', url);
              resolve(); // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            }
          }, 15000);

          const cleanup = () => {
            clearTimeout(timeout);
            if (preloaderRef.current && preloaderRef.current.contains(tempContainer)) {
              try {
                preloaderRef.current.removeChild(tempContainer);
              } catch (e) {
                console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:', e);
              }
            }
            setPreloadingModels(prev => {
              const newSet = new Set(prev);
              newSet.delete(url);
              return newSet;
            });
          };

          // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
          const onLoad = () => {
            console.log('‚úÖ –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–∞:', url);
            globalModelCache.add(url);
            setLoadedModels(new Set(globalModelCache));
            cleanup();
            resolve();
          };

          const onError = (e: any) => {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}):`, url, e);
            cleanup();
            
            if (retryCount < 2) {
              // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
              setTimeout(() => {
                preloadModel(url, retryCount + 1).then(resolve).catch(reject);
              }, 2000);
            } else {
              console.error('‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã:', url);
              resolve(); // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            }
          };

          modelViewer.addEventListener('load', onLoad, { once: true });
          modelViewer.addEventListener('error', onError, { once: true });

          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ model-viewer API
          if (modelViewer.loaded) {
            onLoad();
          }

        } else {
          reject(new Error('Failed to create model-viewer element'));
        }
      };

      waitForModelViewer();
    });

    globalPreloadPromises.set(url, preloadPromise);

    try {
      await preloadPromise;
    } catch (error) {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏:', error);
    } finally {
      globalPreloadPromises.delete(url);
    }
  };

  const preloadModels = async (urls: string[]): Promise<void> => {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π:', urls);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É –Ω–∏–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    const preloadPromises = urls.map((url, index) => 
      new Promise<void>(resolve => {
        setTimeout(() => {
          preloadModel(url).then(resolve).catch(resolve);
        }, index * 500); // 500–º—Å –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
      })
    );
    
    try {
      await Promise.all(preloadPromises);
      console.log('üéâ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
      const readyModels = urls.filter(url => globalModelCache.has(url));
      console.log(`üìä –ì–æ—Ç–æ–≤—ã–µ –º–æ–¥–µ–ª–∏: ${readyModels.length}/${urls.length}`, readyModels);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π:', error);
    }
  };

  const preloadModelPartially = async (url: string, percentage: number): Promise<void> => {
    console.log(`üéØ –ù–∞—á–∏–Ω–∞—é —á–∞—Å—Ç–∏—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏ (${percentage}%):`, url);
    
    try {
      const response = await fetch(url, { method: 'HEAD' });
      const contentLength = response.headers.get('content-length');
      
      if (!contentLength) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞, –∑–∞–≥—Ä—É–∂–∞—é –ø–æ–ª–Ω–æ—Å—Ç—å—é');
        return preloadModel(url);
      }
      
      const totalSize = parseInt(contentLength);
      const partialSize = Math.floor(totalSize * percentage / 100);
      
      console.log(`üìä –ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: ${partialSize} –∏–∑ ${totalSize} –±–∞–π—Ç (${percentage}%)`);
      
      const partialResponse = await fetch(url, {
        headers: {
          'Range': `bytes=0-${partialSize - 1}`
        }
      });
      
      if (partialResponse.status === 206) {
        console.log(`‚úÖ –ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (${percentage}%):`, url);
        globalPartialCache.add(url);
        setPartiallyLoadedModels(new Set(globalPartialCache));
      } else {
        console.warn('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Range –∑–∞–ø—Ä–æ—Å—ã, –∑–∞–≥—Ä—É–∂–∞—é –ø–æ–ª–Ω–æ—Å—Ç—å—é');
        return preloadModel(url);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:', error);
      // Fallback –Ω–∞ –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
      return preloadModel(url);
    }
  };

  const isModelReady = (url: string): boolean => {
    const ready = globalModelCache.has(url);
    console.log('üîç isModelReady:', { url, ready, cacheSize: globalModelCache.size });
    return ready;
  };

  const isModelPartiallyReady = (url: string): boolean => {
    return globalPartialCache.has(url) || globalModelCache.has(url);
  };

  return {
    loadedModels,
    partiallyLoadedModels,
    preloadingModels,
    isModelReady,
    isModelPartiallyReady,
    preloadModel,
    preloadModelPartially,
    preloadModels
  };
};