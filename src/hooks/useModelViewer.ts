import { useRef, useState, useEffect } from "react";
import { useIsMobile } from "@/hooks/use-mobile";

export const useModelViewer = () => {
  const modelViewerRef = useRef<any>(null);
  const [indicatorsOn, setIndicatorsOn] = useState(false);
  const [modelLoaded, setModelLoaded] = useState(false);
  const [isLibraryReady, setIsLibraryReady] = useState(false);
  const [loadingProgress, setLoadingProgress] = useState(0);
  const isMobile = useIsMobile();

  useEffect(() => {
    let checkCount = 0;
    const maxChecks = 50;

    const checkLibrary = () => {
      checkCount++;

      if (
        typeof window !== "undefined" &&
        window.customElements &&
        window.customElements.get("model-viewer")
      ) {
        console.log("‚úÖ model-viewer –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≥–æ—Ç–æ–≤–∞");
        setIsLibraryReady(true);
        return;
      }

      if (checkCount < maxChecks) {
        console.log(`‚è≥ –û–∂–∏–¥–∞–µ–º model-viewer... (${checkCount}/${maxChecks})`);
        setTimeout(checkLibrary, 100);
      } else {
        console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å model-viewer –±–∏–±–ª–∏–æ—Ç–µ–∫—É");
      }
    };

    checkLibrary();
  }, []);

  useEffect(() => {
    if (!isLibraryReady || !modelViewerRef.current) return;

    const modelViewer = modelViewerRef.current;
    setModelLoaded(false);
    setLoadingProgress(0);

    const handleLoad = () => {
      console.log("‚úÖ 3D –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
      setModelLoaded(true);
      setLoadingProgress(100);
    };

    const handleError = (error: any) => {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ 3D –º–æ–¥–µ–ª–∏:", error);
      setModelLoaded(false);
      setLoadingProgress(0);
    };

    const handleProgress = (event: any) => {
      const progress = Math.round(event.detail.totalProgress * 100);
      setLoadingProgress(progress);
      console.log("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏:", progress + "%");
    };

    const handleModelReady = () => {
      console.log("üéØ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é");
      setModelLoaded(true);
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–ª—É—à–∞—Ç–µ–ª–∏
    modelViewer.addEventListener("load", handleLoad);
    modelViewer.addEventListener("error", handleError);
    modelViewer.addEventListener("progress", handleProgress);
    modelViewer.addEventListener("model-visibility", handleModelReady);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
    if (modelViewer.modelIsVisible) {
      console.log("üîÑ –ú–æ–¥–µ–ª—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
      setModelLoaded(true);
      setLoadingProgress(100);
    }

    return () => {
      modelViewer.removeEventListener("load", handleLoad);
      modelViewer.removeEventListener("error", handleError);
      modelViewer.removeEventListener("progress", handleProgress);
      modelViewer.removeEventListener("model-visibility", handleModelReady);
    };
  }, [isLibraryReady]);

  const toggleIndicators = () => {
    if (!modelViewerRef.current || !modelLoaded) {
      console.warn("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
      return;
    }

    try {
      const model = modelViewerRef.current;

      // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
      if (!model.model || !model.modelIsVisible) {
        console.warn("‚ö†Ô∏è 3D –º–æ–¥–µ–ª—å –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞");
        return;
      }

      const threeModel = model.model;
      if (!threeModel || !threeModel.materials) {
        console.warn("‚ö†Ô∏è –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã");
        return;
      }

      const mat1 = threeModel.materials.find(
        (m: any) => m.name === "Material_Indicator",
      );
      const mat2 = threeModel.materials.find(
        (m: any) => m.name === "Material_Indicator2",
      );

      const newState = !indicatorsOn;

      if (mat1) {
        mat1.setEmissiveFactor(newState ? [0.2, 1.0, 0.5] : [0.27, 0.27, 0.27]);
      }
      if (mat2) {
        mat2.setEmissiveFactor(newState ? [1.0, 0.9, 0.3] : [0.27, 0.27, 0.27]);
      }

      setIndicatorsOn(newState);
      console.log(`üí° –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã ${newState ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–≤—ã–∫–ª—é—á–µ–Ω—ã"}`);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:", error);
    }
  };

  return {
    modelViewerRef,
    indicatorsOn,
    modelLoaded,
    isLibraryReady,
    loadingProgress,
    isMobile,
    toggleIndicators,
  };
};
