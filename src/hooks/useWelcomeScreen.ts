import { useState, useEffect, useCallback, useRef } from 'react';
import { modelCacheManager } from '@/utils/modelCacheManager';

interface WelcomeScreenState {
  isVisible: boolean;
  progress: number;
  isAnimating: boolean;
}

interface WelcomeScreenConfig {
  duration: number; // 10000ms
  fadeOutDuration: number; // 400ms
  inactivityThreshold: number; // 1 hour
  tabCloseThreshold: number; // 15 minutes
}

const DEFAULT_CONFIG: WelcomeScreenConfig = {
  duration: 10000,
  fadeOutDuration: 400,
  inactivityThreshold: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç
  tabCloseThreshold: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç
};

const STORAGE_KEY = 'welcomeScreen_lastShown';
const LAST_ACTIVITY_KEY = 'welcomeScreen_lastActivity';

export const useWelcomeScreen = (config: Partial<WelcomeScreenConfig> = {}) => {
  const finalConfig = { ...DEFAULT_CONFIG, ...config };
  
  const [state, setState] = useState<WelcomeScreenState>({
    isVisible: false,
    progress: 0,
    isAnimating: false,
  });

  const animationFrameRef = useRef<number>();
  const startTimeRef = useRef<number>();
  const isTabVisibleRef = useRef(true);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞ —á–µ—Ä–µ–∑ modelCacheManager
  const shouldShowWelcomeScreen = useCallback((): boolean => {
    return modelCacheManager.shouldShowWelcomeScreen();
  }, []);

  // –ú–∞—Å—Ç–µ—Ä-—Ç–∞–π–º–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏
  const runAnimation = useCallback(() => {
    if (!startTimeRef.current) {
      startTimeRef.current = performance.now();
    }

    const animate = (currentTime: number) => {
      if (!startTimeRef.current || !isTabVisibleRef.current) return;

      const elapsed = currentTime - startTimeRef.current;
      const progress = Math.min(elapsed / finalConfig.duration, 1);

      setState(prev => ({
        ...prev,
        progress,
        isAnimating: progress < 1,
      }));

      if (progress < 1) {
        animationFrameRef.current = requestAnimationFrame(animate);
      } else {
        // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –Ω–∞—á–∏–Ω–∞–µ–º fade out
        setTimeout(() => {
          setState(prev => ({
            ...prev,
            isVisible: false,
          }));
        }, 100);
      }
    };

    animationFrameRef.current = requestAnimationFrame(animate);
  }, [finalConfig.duration]);

  // –ó–∞–ø—É—Å–∫ WelcomeScreen
  const showWelcomeScreen = useCallback(() => {
    console.log('üöÄ WelcomeScreen: –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏');
    
    setState({
      isVisible: true,
      progress: 0,
      isAnimating: true,
    });

    startTimeRef.current = undefined;
    runAnimation();

    // –û—Ç–º–µ—á–∞–µ–º –ø–æ—Å–µ—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    modelCacheManager.markHomeVisit();
  }, [runAnimation]);

  // –°–∫—Ä—ã—Ç–∏–µ WelcomeScreen
  const hideWelcomeScreen = useCallback(() => {
    if (animationFrameRef.current) {
      cancelAnimationFrame(animationFrameRef.current);
    }
    
    setState(prev => ({
      ...prev,
      isVisible: false,
      isAnimating: false,
    }));

    startTimeRef.current = undefined;
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–∫–∏
  useEffect(() => {
    const handleVisibilityChange = () => {
      const isVisible = !document.hidden;
      isTabVisibleRef.current = isVisible;

      if (isVisible && state.isAnimating) {
        // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        startTimeRef.current = performance.now() - (state.progress * finalConfig.duration);
        runAnimation();
      } else if (!isVisible && animationFrameRef.current) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        cancelAnimationFrame(animationFrameRef.current);
      }
    };

    document.addEventListener('visibilitychange', handleVisibilityChange);
    return () => document.removeEventListener('visibilitychange', handleVisibilityChange);
  }, [state.isAnimating, state.progress, finalConfig.duration, runAnimation]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const updateActivity = useCallback(() => {
    modelCacheManager.updateActivity();
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];
    
    const handleActivity = () => {
      updateActivity();
    };

    events.forEach(event => {
      document.addEventListener(event, handleActivity, { passive: true });
    });

    return () => {
      events.forEach(event => {
        document.removeEventListener(event, handleActivity);
      });
    };
  }, [updateActivity]);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
      }
    };
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    console.log('üöÄ useWelcomeScreen: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
    
    const initWelcomeScreen = () => {
      // –í–†–ï–ú–ï–ù–ù–ê–Ø –û–¢–õ–ê–î–ö–ê: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º WelcomeScreen
      console.log('üß™ useWelcomeScreen: –û–¢–õ–ê–î–û–ß–ù–´–ô –†–ï–ñ–ò–ú - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑');
      modelCacheManager.forceFirstVisit();
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –¥–æ–ª–≥–æ–º –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–∏
      modelCacheManager.resetInactivityState();
      
      const shouldShow = shouldShowWelcomeScreen();
      console.log('üéØ useWelcomeScreen: –ù—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å?', shouldShow);
      console.log('üìä useWelcomeScreen: –¢–µ–∫—É—â–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:', modelCacheManager.currentMetadata);
      
      if (shouldShow) {
        console.log('‚úÖ useWelcomeScreen: –ó–∞–ø—É—Å–∫–∞–µ–º WelcomeScreen');
        showWelcomeScreen();
      } else {
        console.log('‚ùå useWelcomeScreen: WelcomeScreen –ù–ï –∑–∞–ø—É—â–µ–Ω');
        // –û—Ç–º–µ—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø–æ—Å–µ—â–µ–Ω–∏–µ
        modelCacheManager.markHomeVisit();
        updateActivity();
      }
    };
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const timer = setTimeout(initWelcomeScreen, 100);
    
    return () => clearTimeout(timer);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  return {
    isVisible: state.isVisible,
    progress: state.progress,
    isAnimating: state.isAnimating,
    showWelcomeScreen,
    hideWelcomeScreen,
    updateActivity,
  };
};