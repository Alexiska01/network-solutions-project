import { useState, useEffect, useRef, useCallback } from 'react';

interface UseProgressCounterOptions {
  duration: number;
  updateInterval?: number;
  onComplete?: () => void;
}

export const useProgressCounter = ({ 
  duration, 
  updateInterval = 50, 
  onComplete 
}: UseProgressCounterOptions) => {
  const [progress, setProgress] = useState(0);
  const [isRunning, setIsRunning] = useState(false);
  const [isComplete, setIsComplete] = useState(false);
  
  const startTimeRef = useRef<number | null>(null);
  const animationFrameRef = useRef<number | null>(null);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  const updateProgress = useCallback(() => {
    if (!startTimeRef.current) return;
    
    const elapsed = Date.now() - startTimeRef.current;
    const newProgress = Math.min((elapsed / duration) * 100, 100);
    
    setProgress(newProgress);
    
    if (newProgress >= 100) {
      setIsComplete(true);
      setIsRunning(false);
      if (onComplete) {
        onComplete();
      }
    }
  }, [duration, onComplete]);

  const start = useCallback(() => {
    if (isRunning || isComplete) return;
    
    console.log('üöÄ Progress Counter: –ó–∞–ø—É—Å–∫ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–∞', duration, '–º—Å');
    startTimeRef.current = Date.now();
    setIsRunning(true);
    setProgress(0);
    setIsComplete(false);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º setInterval –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    intervalRef.current = setInterval(updateProgress, updateInterval);
  }, [isRunning, isComplete, duration, updateInterval, updateProgress]);

  const stop = useCallback(() => {
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
    if (animationFrameRef.current) {
      cancelAnimationFrame(animationFrameRef.current);
      animationFrameRef.current = null;
    }
    setIsRunning(false);
    console.log('‚èπÔ∏è Progress Counter: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞', Math.round(progress), '%');
  }, [progress]);

  const reset = useCallback(() => {
    stop();
    setProgress(0);
    setIsComplete(false);
    startTimeRef.current = null;
    console.log('üîÑ Progress Counter: –°–±—Ä–æ—à–µ–Ω');
  }, [stop]);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
      }
    };
  }, []);

  return {
    progress: Math.round(progress * 10) / 10, // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    isRunning,
    isComplete,
    start,
    stop,
    reset
  };
};