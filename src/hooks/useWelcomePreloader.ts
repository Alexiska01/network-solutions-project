import { useEffect, useState } from 'react';
import { useProgressCounter } from './useProgressCounter';

interface WelcomePreloaderState {
  isWelcomeLoadingComplete: boolean;
  loadingProgress: number;
}

export const useWelcomePreloader = (heroData: any[]): WelcomePreloaderState => {
  const [isWelcomeLoadingComplete, setIsWelcomeLoadingComplete] = useState(false);
  const [criticalModelsLoaded, setCriticalModelsLoaded] = useState(false);
  
  // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ - 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
  const { progress: loadingProgress, start: startProgress, isComplete: progressComplete } = useProgressCounter({
    duration: 15000, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ 15 —Å–µ–∫—É–Ω–¥–∞–º –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    updateInterval: typeof window !== 'undefined' && window.innerWidth < 768 ? 100 : 50, // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    onComplete: () => {
      console.log('‚úÖ Progress Counter: –î–æ—Å—Ç–∏–≥–Ω—É—Ç 100%');
    }
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
  useEffect(() => {
    console.log('üöÄ WelcomeScreen: –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≥—Ä—É–∑–∫–∏');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å—Ä–∞–∑—É
    startProgress();
    
    const loadModels = async () => {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ URL –º–æ–¥–µ–ª–µ–π
      const allUrls = heroData.map(item => item.modelUrl);
      console.log('üìé WelcomeScreen: URL –º–æ–¥–µ–ª–µ–π:', allUrls);
      
      // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π 3530 –∏ 3730 —Å–µ—Ä–∏–∏
      const criticalUrls = heroData.slice(0, 2).map(item => item.modelUrl);
      const remainingUrls = heroData.slice(2).map(item => item.modelUrl);
      console.log('‚ö° WelcomeScreen: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ (3530, 3730):', criticalUrls);
      console.log('üîÑ WelcomeScreen: –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:', remainingUrls);
      
      // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π —Å —Ä–µ—Ç—Ä–∞–µ–º–∏
      const loadCriticalModel = async (url: string, index: number, maxRetries = 3) => {
        for (let attempt = 1; attempt <= maxRetries; attempt++) {
          try {
            console.log(`üîÑ WelcomeScreen: –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} - –ó–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏ ${index + 1} - ${url}`);
            const response = await fetch(url, { 
              method: 'HEAD',
              cache: 'force-cache',
              mode: 'cors'
            });
            
            if (response.ok) {
              console.log(`‚úÖ WelcomeScreen: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å ${index + 1} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ - ${url}`);
              return true;
            } else {
              console.warn(`‚ö†Ô∏è WelcomeScreen: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å ${index + 1} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (${response.status}) - ${url}`);
              if (attempt < maxRetries) await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
            }
          } catch (error) {
            console.error(`‚ùå WelcomeScreen: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏ ${index + 1} (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}) - ${url}:`, error);
            if (attempt < maxRetries) await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
          }
        }
        return false;
      };
      
      // –ó–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º
      try {
        const criticalResults = await Promise.all(
          criticalUrls.map((url, index) => loadCriticalModel(url, index))
        );
        
        const successfulCriticalLoads = criticalResults.filter(result => result).length;
        console.log(`‚úÖ WelcomeScreen: –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${successfulCriticalLoads}/${criticalUrls.length} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π`);
        
        if (successfulCriticalLoads > 0) {
          setCriticalModelsLoaded(true);
        } else {
          console.warn('‚ö†Ô∏è WelcomeScreen: –ù–∏ –æ–¥–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
          setCriticalModelsLoaded(true);
        }
      } catch (error) {
        console.error('‚ùå WelcomeScreen: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π:', error);
        // –î–∞–∂–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => setCriticalModelsLoaded(true), 5000);
      }
      
      // –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      if (remainingUrls.length > 0) {
        console.log('üîÑ WelcomeScreen: –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...');
        
        // –§–æ–Ω–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
        Promise.all(
          remainingUrls.map(async (url, index) => {
            try {
              console.log(`üîÑ WelcomeScreen: –§–æ–Ω–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ${index + 3} - ${url}`);
              const response = await fetch(url, { 
                method: 'HEAD',
                cache: 'force-cache',
                mode: 'cors'
              });
              
              if (response.ok) {
                console.log(`‚úÖ WelcomeScreen: –§–æ–Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å ${index + 3} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ - ${url}`);
              } else {
                console.warn(`‚ö†Ô∏è WelcomeScreen: –§–æ–Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å ${index + 3} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - ${url}`);
              }
            } catch (error) {
              console.error(`‚ùå WelcomeScreen: –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ ${index + 3} - ${url}:`, error);
            }
          })
        ).then(() => {
          console.log('‚úÖ WelcomeScreen: –§–æ–Ω–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        }).catch(error => {
          console.error('‚ùå WelcomeScreen: –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        });
      }
    };

    loadModels();
  }, [heroData, startProgress]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  useEffect(() => {
    if (progressComplete && criticalModelsLoaded) {
      console.log('üéâ WelcomeScreen: –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã - –ø—Ä–æ–≥—Ä–µ—Å—Å 100% –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      setIsWelcomeLoadingComplete(true);
    }
  }, [progressComplete, criticalModelsLoaded]);

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥ (safety net) - –¥–ª—è –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞–µ–≤
  useEffect(() => {
    const safetyTimeout = setTimeout(() => {
      console.log('üö® WelcomeScreen: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥ - –¥–ª—è –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞–µ–≤');
      setIsWelcomeLoadingComplete(true);
    }, 20000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 20 —Å–µ–∫—É–Ω–¥ –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏

    return () => clearTimeout(safetyTimeout);
  }, []);

  return {
    isWelcomeLoadingComplete,
    loadingProgress
  };
};