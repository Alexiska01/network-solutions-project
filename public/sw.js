// –°–£–ü–ï–† –ê–ì–†–ï–°–°–ò–í–ù–´–ô Service Worker –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const CACHE_NAME = 'idata-super-cache-v6';
const CRITICAL_CACHE = 'idata-critical-v6';
const MODEL_CACHE = 'idata-models-v6';
const IMAGE_CACHE = 'idata-images-v6';

// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã - –∫—ç—à–∏—Ä—É–µ–º –ù–ê–í–°–ï–ì–î–ê
const CRITICAL_RESOURCES = [
  '/',
  '/manifest.json'
];

// 3D –ú–æ–¥–µ–ª–∏ - –∫—ç—à–∏—Ä—É–µ–º –Ω–∞ –≥–æ–¥
const MODEL_URLS = [
  '/models/3530all.glb',
  '/models/3730all.glb',
  '/models/4530all.glb',
  '/models/6010all.glb',
  '/models/IDS3530-24P.glb',
  '/models/IDS3530-24T.glb',
  '/models/IDS3530-24S.glb'
];

// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –∫—ç—à–∏—Ä—É–µ–º –Ω–∞–≤—Å–µ–≥–¥–∞
const CRITICAL_IMAGES = [
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ CDN
  '/img/164ca65e-bdb4-4caa-89fb-0459f4ca4138.jpg'
];

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SW - –°–£–ü–ï–† –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
self.addEventListener('install', (event) => {
  console.log('üöÄ –°–£–ü–ï–† Service Worker: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º');
  
  event.waitUntil(
    Promise.all([
      // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
      caches.open(CRITICAL_CACHE).then(cache => {
        console.log('‚ö° –ö—ç—à–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã');
        return cache.addAll(CRITICAL_RESOURCES).catch(err => {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤:', err);
        });
      }),
      
      // 3D –º–æ–¥–µ–ª–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
      caches.open(MODEL_CACHE).then(cache => {
        console.log('üéØ –ö—ç—à–∏—Ä—É–µ–º 3D –º–æ–¥–µ–ª–∏');
        return Promise.all(
          MODEL_URLS.map(url => {
            return fetch(url, {
              priority: 'high',
              mode: 'cors',
              credentials: 'omit'
            })
            .then(response => {
              if (response.ok) {
                console.log('‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞:', url);
                return cache.put(url, response);
              }
            })
            .catch(err => {
              console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏:', url, err);
            });
          })
        );
      }),
      
      // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      caches.open(IMAGE_CACHE).then(cache => {
        console.log('üñºÔ∏è –ö—ç—à–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        return Promise.all(
          CRITICAL_IMAGES.map(url => {
            return fetch(url, {
              mode: 'cors',
              credentials: 'omit'
            })
            .then(response => {
              if (response.ok) {
                console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ:', url);
                return cache.put(url, response);
              }
            })
            .catch(err => {
              console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', url, err);
            });
          })
        );
      })
    ]).then(() => {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—ã–π SW
      console.log('‚úÖ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º SW');
      self.skipWaiting();
    })
  );
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è - –±–µ—Ä—ë–º –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
self.addEventListener('activate', (event) => {
  console.log('‚úÖ –°–£–ü–ï–† Service Worker –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
  
  event.waitUntil(
    Promise.all([
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫—ç—à–∏
      caches.keys().then(cacheNames => {
        return Promise.all(
          cacheNames.map(cacheName => {
            if (!cacheName.includes('v5')) {
              console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      }),
      // –ë–µ—Ä—ë–º –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤—Å–µ–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
      self.clients.claim()
    ])
  );
});

// Fetch - –°–£–ü–ï–† –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = request.url;
  
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ-GET –∑–∞–ø—Ä–æ—Å—ã
  if (request.method !== 'GET') return;
  
  // 3D –ú–û–î–ï–õ–ò - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –∫—ç—à –ù–ê–í–°–ï–ì–î–ê
  if (MODEL_URLS.some(modelUrl => url.endsWith(modelUrl))) {
    event.respondWith(superCacheFirst(request, MODEL_CACHE, 'üéØ –ú–æ–¥–µ–ª—å'));
  }
  
  // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø - –∫—ç—à –Ω–∞–≤—Å–µ–≥–¥–∞
  else if (CRITICAL_IMAGES.some(imageUrl => url.includes(imageUrl))) {
    event.respondWith(superCacheFirst(request, IMAGE_CACHE, 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'));
  }
  
  // –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –†–ï–°–£–†–°–´ - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  else if (isStaticAsset(request)) {
    event.respondWith(aggressiveCache(request, CACHE_NAME, 'üì¶ –°—Ç–∞—Ç–∏–∫–∞'));
  }
  
  // HTML –°–¢–†–ê–ù–ò–¶–´ - –∫—ç—à —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –≤ —Ñ–æ–Ω–µ
  else if (isHTMLPage(request)) {
    event.respondWith(staleWhileRevalidate(request, CACHE_NAME, 'üìÑ HTML'));
  }
  
  // –í–°–Å –û–°–¢–ê–õ–¨–ù–û–ï - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  else {
    event.respondWith(standardCache(request, CACHE_NAME, 'üåê –ü—Ä–æ—á–µ–µ'));
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤
function isStaticAsset(request) {
  const url = new URL(request.url);
  return url.pathname.match(/\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|webp|glb)$/);
}

function isHTMLPage(request) {
  const url = new URL(request.url);
  return url.pathname === '/' || !url.pathname.includes('.');
}

// –°–£–ü–ï–† –∫—ç—à - —Ä–µ—Å—É—Ä—Å –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
async function superCacheFirst(request, cacheName, logPrefix) {
  const cache = await caches.open(cacheName);
  const cachedResponse = await cache.match(request);
  
  if (cachedResponse) {
    console.log(`‚ö° ${logPrefix} –∏–∑ –°–£–ü–ï–† –∫—ç—à–∞:`, request.url);
    return cachedResponse;
  }
  
  try {
    console.log(`üåê ${logPrefix} –∑–∞–≥—Ä—É–∂–∞–µ–º –ü–ï–†–í–´–ô —Ä–∞–∑:`, request.url);
    const networkResponse = await fetch(request, {
      priority: 'high',
      mode: 'cors',
      credentials: 'omit'
    });
    
    if (networkResponse.ok) {
      // –ö—ç—à–∏—Ä—É–µ–º –ù–ê–í–°–ï–ì–î–ê
      await cache.put(request, networkResponse.clone());
      console.log(`‚úÖ ${logPrefix} –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω –ù–ê–í–°–ï–ì–î–ê:`, request.url);
    }
    
    return networkResponse;
  } catch (error) {
    console.warn(`‚ùå ${logPrefix} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:`, request.url, error);
    return new Response(`${logPrefix} offline`, { status: 503 });
  }
}

// –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ - –¥–æ–ª–≥–∏–π TTL
async function aggressiveCache(request, cacheName, logPrefix) {
  const cache = await caches.open(cacheName);
  const cachedResponse = await cache.match(request);
  
  if (cachedResponse) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞ (24 —á–∞—Å–∞)
    const cachedDate = new Date(cachedResponse.headers.get('sw-cached-date') || 0);
    const now = new Date();
    const ageHours = (now - cachedDate) / (1000 * 60 * 60);
    
    if (ageHours < 24) {
      console.log(`‚ö° ${logPrefix} –∏–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –∫—ç—à–∞:`, request.url);
      return cachedResponse;
    }
  }
  
  try {
    const networkResponse = await fetch(request);
    
    if (networkResponse.ok) {
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
      const responseClone = networkResponse.clone();
      const headers = new Headers(responseClone.headers);
      headers.set('sw-cached-date', new Date().toISOString());
      
      const newResponse = new Response(responseClone.body, {
        status: responseClone.status,
        statusText: responseClone.statusText,
        headers: headers
      });
      
      await cache.put(request, newResponse);
      console.log(`‚úÖ ${logPrefix} –æ–±–Ω–æ–≤–ª—ë–Ω –≤ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–º –∫—ç—à–µ:`, request.url);
    }
    
    return networkResponse;
  } catch (error) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –¥–∞–∂–µ –µ—Å–ª–∏ —É—Å—Ç–∞—Ä–µ–ª
    if (cachedResponse) {
      console.log(`üîÑ ${logPrefix} –∏–∑ –°–¢–ê–†–û–ì–û –∫—ç—à–∞ (–æ—Ñ–ª–∞–π–Ω):`, request.url);
      return cachedResponse;
    }
    
    return new Response(`${logPrefix} offline`, { status: 503 });
  }
}

// Stale While Revalidate - –¥–ª—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü
async function staleWhileRevalidate(request, cacheName, logPrefix) {
  const cache = await caches.open(cacheName);
  const cachedResponse = await cache.match(request);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ñ–æ–Ω–µ
  const fetchPromise = fetch(request).then(response => {
    if (response.ok) {
      cache.put(request, response.clone());
      console.log(`üîÑ ${logPrefix} –æ–±–Ω–æ–≤–ª—ë–Ω –≤ —Ñ–æ–Ω–µ:`, request.url);
    }
    return response;
  }).catch(() => {
    console.warn(`‚ö†Ô∏è ${logPrefix} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å:`, request.url);
  });
  
  if (cachedResponse) {
    console.log(`‚ö° ${logPrefix} –∏–∑ –∫—ç—à–∞ + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ:`, request.url);
    return cachedResponse;
  }
  
  return fetchPromise;
}

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
async function standardCache(request, cacheName, logPrefix) {
  try {
    const networkResponse = await fetch(request);
    
    if (networkResponse.ok) {
      const cache = await caches.open(cacheName);
      cache.put(request, networkResponse.clone());
      console.log(`‚úÖ ${logPrefix} –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω:`, request.url);
    }
    
    return networkResponse;
  } catch (error) {
    const cachedResponse = await caches.match(request);
    
    if (cachedResponse) {
      console.log(`üîÑ ${logPrefix} –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫—ç—à–∞:`, request.url);
      return cachedResponse;
    }
    
    return new Response(`${logPrefix} offline`, { status: 503 });
  }
}

console.log('üî•üöÄ –°–£–ü–ï–† –ê–ì–†–ï–°–°–ò–í–ù–´–ô Service Worker –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');