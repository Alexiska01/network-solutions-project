#!/usr/bin/env node
/*
  –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ .glb –º–æ–¥–µ–ª–µ–π –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–∂–∞—Ç–∏—è:
  - –ù–∞–ª–∏—á–∏–µ Draco:   –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–æ–∫–∞ "KHR_draco_mesh_compression"
  - –ù–∞–ª–∏—á–∏–µ Meshopt: –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–æ–∫–∞ "MESHOPT_compression"
  - –ü—Ä–æ–≤–µ—Ä–∫–∞ KTX2:   –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–æ–∫–∞ "KHR_texture_basisu"
  - –†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤

  –ó–∞–ø—É—Å–∫:
    node scripts/analyze-models.js
*/

const fs = require('fs');
const path = require('path');

const MODELS_DIR = path.join(__dirname, '..', 'public', 'models');

function formatSize(bytes) {
  if (bytes > 1024 * 1024) return (bytes / 1024 / 1024).toFixed(2) + ' MB';
  if (bytes > 1024) return (bytes / 1024).toFixed(1) + ' KB';
  return bytes + ' B';
}

function analyzeFile(filePath) {
  const buf = fs.readFileSync(filePath);
  // –ò—â–µ–º –≤ JSON —á–∞–Ω–∫–µ (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äî –≤–æ –≤—Å—ë–º —Ñ–∞–π–ª–µ)
  const text = buf.toString('utf8');
  const hasDraco = text.includes('KHR_draco_mesh_compression');
  const hasMeshopt = text.includes('MESHOPT_compression');
  const hasKtx2 = text.includes('KHR_texture_basisu');
  return { hasDraco, hasMeshopt, hasKtx2, size: buf.length };
}

function pad(str, len) { return (str + ' '.repeat(len)).slice(0, len); }

function run() {
  if (!fs.existsSync(MODELS_DIR)) {
    console.error('‚ùå –ü–∞–ø–∫–∞ public/models –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    process.exit(1);
  }
  const files = fs.readdirSync(MODELS_DIR).filter(f => f.toLowerCase().endsWith('.glb'));
  if (files.length === 0) {
    console.log('‚ö†Ô∏è  –ù–µ—Ç .glb —Ñ–∞–π–ª–æ–≤ –≤ public/models');
    return;
  }
  console.log('üîç –ê–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–µ–π:\n');
  const rows = [];
  let total = 0;
  for (const f of files) {
    const full = path.join(MODELS_DIR, f);
    const info = analyzeFile(full);
    total += info.size;
    rows.push({ name: f, ...info });
  }

  // –í—ã–≤–æ–¥
  console.log(pad('–§–∞–π–ª', 22), pad('–†–∞–∑–º–µ—Ä', 10), pad('Draco', 7), pad('Meshopt', 9), pad('KTX2', 6));
  console.log('-'.repeat(60));
  for (const r of rows) {
    console.log(
      pad(r.name, 22),
      pad(formatSize(r.size), 10),
      pad(r.hasDraco ? 'yes' : 'no', 7),
      pad(r.hasMeshopt ? 'yes' : 'no', 9),
      pad(r.hasKtx2 ? 'yes' : 'no', 6),
    );
  }
  console.log('-'.repeat(60));
  console.log('–í—Å–µ–≥–æ:', formatSize(total));

  const noDraco = rows.filter(r => !r.hasDraco).map(r => r.name);
  if (noDraco.length) {
    console.log('\n‚ö†Ô∏è  –ë–µ–∑ Draco:', noDraco.join(', '));
    console.log('   ‚Üí –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å: npm run models:compress-draco');
  } else {
    console.log('\n‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ –∏–º–µ—é—Ç Draco (–∏–ª–∏ —É–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã).');
  }
  const noMeshopt = rows.filter(r => !r.hasMeshopt).length;
  if (noMeshopt) {
    console.log('‚ÑπÔ∏è  Meshopt –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å meshopt –¥–ª—è –µ—â—ë –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.');
  }
}

run();
