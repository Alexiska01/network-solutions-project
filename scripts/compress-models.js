#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö 3D –º–æ–¥–µ–ª–µ–π –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
const modelUrls = [
  'https://s3.twcstorage.ru/c80bd43d-3dmodels/S3530-all.glb',
  'https://s3.twcstorage.ru/c80bd43d-3dmodels/S4530-all.glb',
  'https://s3.twcstorage.ru/c80bd43d-3dmodels/IDS6010-all.glb',
  'https://s3.twcstorage.ru/c80bd43d-3dmodels/3730all.glb',
  'https://s3.twcstorage.ru/c80bd43d-3dmodels/S3530-24S.glb',
  'https://s3.twcstorage.ru/c80bd43d-3dmodels/S3530-48T.glb',
  'https://s3.twcstorage.ru/c80bd43d-3dmodels/S3530-48P.glb',
  'https://s3.twcstorage.ru/c80bd43d-3dmodels/S3530-24T.glb',
  'https://s3.twcstorage.ru/c80bd43d-3dmodels/S3530-24P.glb',
  'https://s3.twcstorage.ru/c80bd43d-3dmodels/S4530-48T.glb',
  'https://s3.twcstorage.ru/c80bd43d-3dmodels/S4530-24S.glb',
  'https://s3.twcstorage.ru/c80bd43d-3dmodels/S4530-48P.glb',
  'https://s3.twcstorage.ru/c80bd43d-3dmodels/S4530-24T.glb',
  'https://s3.twcstorage.ru/c80bd43d-3dmodels/S4530-24P.glb',
  'https://s3.twcstorage.ru/c80bd43d-3dmodels/S4530-48S.glb',
  'https://s3.twcstorage.ru/c80bd43d-3dmodels/S3730-24T.glb',
  'https://s3.twcstorage.ru/c80bd43d-3dmodels/S3730-24P.glb'
];

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–µ–π
const modelsDir = path.join(__dirname, '..', 'models');
const originalDir = path.join(modelsDir, 'original');
const compressedDir = path.join(modelsDir, 'compressed');

async function createDirectories() {
  if (!fs.existsSync(modelsDir)) fs.mkdirSync(modelsDir);
  if (!fs.existsSync(originalDir)) fs.mkdirSync(originalDir);
  if (!fs.existsSync(compressedDir)) fs.mkdirSync(compressedDir);
}

async function downloadModel(url, filename) {
  const filePath = path.join(originalDir, filename);
  
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ –ú–æ–¥–µ–ª—å ${filename} —É–∂–µ —Å–∫–∞—á–∞–Ω–∞`);
    return filePath;
  }
  
  console.log(`üì• –°–∫–∞—á–∏–≤–∞—é –º–æ–¥–µ–ª—å ${filename}...`);
  
  try {
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const arrayBuffer = await response.arrayBuffer();
    const buffer = Buffer.from(arrayBuffer);
    
    fs.writeFileSync(filePath, buffer);
    console.log(`‚úÖ –ú–æ–¥–µ–ª—å ${filename} —Å–∫–∞—á–∞–Ω–∞ (${(buffer.length / 1024 / 1024).toFixed(2)} MB)`);
    
    return filePath;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ ${filename}:`, error.message);
    return null;
  }
}

async function compressModel(inputPath, outputPath) {
  console.log(`üóúÔ∏è  –°–∂–∏–º–∞—é –º–æ–¥–µ–ª—å ${path.basename(inputPath)}...`);
  
  try {
    // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∂–∞—Ç–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const command = `npx gltf-pipeline -i "${inputPath}" -o "${outputPath}" --draco.compressionLevel=10 --draco.quantizePositionBits=11 --draco.quantizeNormalBits=8 --draco.quantizeTexcoordBits=10 --draco.quantizeColorBits=8 --draco.quantizeGenericBits=8 --draco.unifiedQuantization=true --textureCompressionOptions.format=webp --textureCompressionOptions.quality=85 --removeUnusedMaterials --removeUnusedTextures --removeUnusedVertexColors --mergeDuplicateVertices --optimizeDrawCalls`;
    
    const result = await execAsync(command);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
    const originalSize = fs.statSync(inputPath).size;
    const compressedSize = fs.statSync(outputPath).size;
    const compressionRatio = ((1 - compressedSize / originalSize) * 100).toFixed(1);
    
    console.log(`‚úÖ –ú–æ–¥–µ–ª—å ${path.basename(inputPath)} —Å–∂–∞—Ç–∞:`);
    console.log(`   üìä –ë—ã–ª–æ: ${(originalSize / 1024 / 1024).toFixed(2)} MB`);
    console.log(`   üìä –°—Ç–∞–ª–æ: ${(compressedSize / 1024 / 1024).toFixed(2)} MB`);
    console.log(`   üìä –°–∂–∞—Ç–∏–µ: ${compressionRatio}%`);
    
    return { originalSize, compressedSize, compressionRatio };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ ${path.basename(inputPath)}:`, error.message);
    return null;
  }
}

async function processAllModels() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é —Å–∂–∞—Ç–∏–µ 3D –º–æ–¥–µ–ª–µ–π...\n');
  
  await createDirectories();
  
  let totalOriginalSize = 0;
  let totalCompressedSize = 0;
  let processedCount = 0;
  
  for (const url of modelUrls) {
    const filename = path.basename(url);
    const inputPath = await downloadModel(url, filename);
    
    if (!inputPath) continue;
    
    const outputPath = path.join(compressedDir, filename);
    const result = await compressModel(inputPath, outputPath);
    
    if (result) {
      totalOriginalSize += result.originalSize;
      totalCompressedSize += result.compressedSize;
      processedCount++;
    }
    
    console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
  }
  
  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–æ–¥–µ–ª–µ–π: ${processedCount}`);
  console.log(`   –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${(totalOriginalSize / 1024 / 1024).toFixed(2)} MB`);
  console.log(`   –°–∂–∞—Ç—ã–π —Ä–∞–∑–º–µ—Ä: ${(totalCompressedSize / 1024 / 1024).toFixed(2)} MB`);
  console.log(`   –û–±—â–µ–µ —Å–∂–∞—Ç–∏–µ: ${((1 - totalCompressedSize / totalOriginalSize) * 100).toFixed(1)}%`);
  console.log(`   –≠–∫–æ–Ω–æ–º–∏—è: ${((totalOriginalSize - totalCompressedSize) / 1024 / 1024).toFixed(2)} MB`);
  
  console.log('\nüéØ –°–∂–∞—Ç—ã–µ –º–æ–¥–µ–ª–∏ –≥–æ—Ç–æ–≤—ã –≤ –ø–∞–ø–∫–µ models/compressed/');
  console.log('üí° –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å URL –º–æ–¥–µ–ª–µ–π –≤ –∫–æ–¥–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã');
}

// –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
processAllModels().catch(console.error);