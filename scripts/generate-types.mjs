import { writeFileSync, mkdirSync, existsSync } from 'node:fs';
import { zodToTs, printNode } from 'zod-to-ts';
import { leadSchema } from '../server/schema.js';

const { node } = zodToTs(leadSchema, 'LeadInput');
const outDir = 'src/types';
if (!existsSync(outDir)) mkdirSync(outDir, { recursive: true });
const printed = printNode(node).trim();
// If printed already contains a declaration (interface/type LeadInput ...), export it as-is.
// Otherwise, it's likely a type literal `{ ... }` â€” wrap into a named type alias.
const hasNamedDecl = /^(interface|type)\s+LeadInput\b/.test(printed);
const content = hasNamedDecl
	? `// AUTO-GENERATED by scripts/generate-types.mjs\nexport ${printed}\n`
	: `// AUTO-GENERATED by scripts/generate-types.mjs\nexport type LeadInput = ${printed}\n`;
writeFileSync(`${outDir}/lead-input.d.ts`, content);
console.log('Generated', `${outDir}/lead-input.d.ts`);
