#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { glob } = require('glob');

// –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö URL –Ω–∞ –Ω–æ–≤—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ (—Ç–æ–ª—å–∫–æ all –≤–µ—Ä—Å–∏–∏)
const modelMapping = {
  'https://s3.twcstorage.ru/c80bd43d-3dmodels/3530all.glb': '/models/3530all.glb',
  'https://s3.twcstorage.ru/c80bd43d-3dmodels/3730all.glb': '/models/3730all.glb',
  'https://s3.twcstorage.ru/c80bd43d-3dmodels/4530all.glb': '/models/4530all.glb',
  'https://s3.twcstorage.ru/c80bd43d-3dmodels/6010all.glb': '/models/6010all.glb',
  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
  'https://s3.twcstorage.ru/c80bd43d-3dmodels/S3530-all.glb': '/models/3530all.glb',
  'https://s3.twcstorage.ru/c80bd43d-3dmodels/S4530-all.glb': '/models/4530all.glb',
  'https://s3.twcstorage.ru/c80bd43d-3dmodels/IDS6010-all.glb': '/models/6010all.glb'
};

async function updateFileContent(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let hasChanges = false;
    
    // –ó–∞–º–µ–Ω—è–µ–º URL –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
    for (const [oldUrl, newPath] of Object.entries(modelMapping)) {
      if (content.includes(oldUrl)) {
        content = content.replace(new RegExp(oldUrl.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), newPath);
        hasChanges = true;
      }
    }
    
    if (hasChanges) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: ${filePath}`);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${filePath}:`, error.message);
    return false;
  }
}

async function updateAllFiles() {
  console.log('üîÑ –û–±–Ω–æ–≤–ª—è—é URL –º–æ–¥–µ–ª–µ–π –≤ —Ñ–∞–π–ª–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞...\n');
  
  // –§–∞–π–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const patterns = [
    'src/**/*.ts',
    'src/**/*.tsx',
    'src/**/*.js',
    'src/**/*.jsx',
    'index.html'
  ];
  
  let totalUpdated = 0;
  
  for (const pattern of patterns) {
    const files = await glob(pattern);
    
    for (const file of files) {
      const updated = await updateFileContent(file);
      if (updated) totalUpdated++;
    }
  }
  
  console.log(`\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalUpdated}`);
  console.log('üéØ –í—Å–µ URL –º–æ–¥–µ–ª–µ–π –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏');
  console.log('üí° –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–∂–∞—Ç—ã–µ –º–æ–¥–µ–ª–∏ –≤ public/models/compressed/');
}

// –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
updateAllFiles().catch(console.error);